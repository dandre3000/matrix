/**
 * Copyright (c) 2024 DeAundre Payne
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <https://www.gnu.org/licenses/>.
 *
 * @module Matrix
 * @license GPL-3.0
 **/
"use strict";const validSet=new WeakSet;export const newMatrix=(e,r,t,o=new ArrayBuffer(e*r*8),n=0)=>{if(void 0===e)throw new ReferenceError("rows must be defined");if("number"!=typeof e)throw new TypeError("rows must be a number");if(e%1!=0)throw new RangeError("rows must be an integer");if(e<1)throw new RangeError("rows must be greater than or equal to 1");if(void 0===r)throw new ReferenceError("columns must be defined");if("number"!=typeof r)throw new TypeError("columns must be a number");if(r%1!=0)throw new RangeError("columns must be an integer");if(r<1)throw new RangeError("columns must be greater than or equal to 1");if(void 0!==t){if("object"!=typeof t||null===t)throw new TypeError("data must be an object or array");if(void 0===t.length)throw new ReferenceError("data.length must be defined");if("number"!=typeof t.length)throw new TypeError("data.length must be a number");for(let e=0;e<t.length;e++)if("number"!=typeof t[e])throw new TypeError(`data[${e}] must be a number`)}if(o instanceof ArrayBuffer!=!0)throw new TypeError("buffer must be an ArrayBuffer");if(o.byteLength<e*r*8)throw new RangeError("buffer.byteLength must be greater than or equal to the byteLength required to store the whole matrix (rows * columns * 8)");if("number"!=typeof n)throw new TypeError("byteOffset must be a number");if(o.byteLength-n<e*r*8)throw new RangeError("buffer.byteLength minus byteOffset must be less than or equal to the byteLength required to store the whole matrix (rows * columns * 8)");const a={data:new Float64Array(o,n,e*r)};if(void 0!==t){const e=Math.min(t.length,a.data.length);for(let r=0;r<e;r++)a.data[r]=t[r]}return Object.defineProperty(a,"rows",{value:e,configurable:!1,enumerable:!0,writable:!1}),Object.defineProperty(a,"columns",{value:r,configurable:!1,enumerable:!0,writable:!1}),validSet.add(a),a};export const checkMatrix=e=>{if(void 0===e)throw new ReferenceError("matrix must be defined");if("object"!=typeof e||null===e)throw new TypeError("matrix must be an object or array");if(!0===validSet.has(e))return e;{const{columns:r,data:t,rows:o}=e;if(void 0===o)throw new ReferenceError("matrix.rows must be defined");if("number"!=typeof o)throw new TypeError("matrix.rows must be a number");if(o%1!=0)throw new RangeError("matrix.rows must be an integer");if(o<1)throw new RangeError("matrix.rows must be greater than or equal to 1");if(void 0===r)throw new ReferenceError("matrix.columns must be defined");if("number"!=typeof r)throw new TypeError("matrix.columns must be a number");if(r%1!=0)throw new RangeError("matrix.columns must be an integer");if(r<1)throw new RangeError("matrix.columns must be greater than or equal to 1");if(void 0===t)throw new ReferenceError("matrix.data must be defined");if("object"!=typeof t||null===t)throw new TypeError("matrix.data must be an object or array");if(void 0===t.length)throw new ReferenceError("matrix.data.length must be defined");if("number"!=typeof t.length)throw new TypeError("matrix.data.length must be a number");if(t.length!==o*r)throw new RangeError("matrix.data.length must equal rows * columns");if(!1==(!0===ArrayBuffer.isView(t)&&t instanceof DataView==!1))for(let e=0;e<t.length;e++)if("number"!=typeof t[e])throw new TypeError(`matrix.data[${e}] must be a number`);return e}};export const isMatrix=e=>{if(void 0===e)return!1;if("object"!=typeof e||null===e)return!1;if(!0===validSet.has(e))return!0;{const{columns:r,data:t,rows:o}=e;if(void 0===o||"number"!=typeof o||o%1!=0||o<1||void 0===r||"number"!=typeof r||r%1!=0||r<1||void 0===t||"object"!=typeof t||null===t||void 0===t.length||"number"!=typeof t.length||t.length!==o*r)return!1;if(!1==(!0===ArrayBuffer.isView(t)&&t instanceof DataView==!1))for(let e=0;e<t.length;e++)if("number"!=typeof t[e])return!1;return!0}};export const add=(e,r,t=[])=>{if(checkMatrix(e),checkMatrix(r),e.columns!==r.columns||e.rows!==r.rows)throw new RangeError("The dimensions of a must equal the dimensions of b");if("object"!=typeof t||null===t)throw new TypeError("result must be an object or array");for(let o=0;o<e.data.length;o++)t[o]=e.data[o]+r.data[o];return t};export const subtract=(e,r,t=[])=>{if(checkMatrix(e),checkMatrix(r),e.columns!==r.columns||e.rows!==r.rows)throw new RangeError("The dimensions of a must equal the dimensions of b");if("object"!=typeof t||null===t)throw new TypeError("result must be an object or array");for(let o=0;o<e.data.length;o++)t[o]=e.data[o]-r.data[o];return t};export const multiplyScalar=(e,r,t=[])=>{if(checkMatrix(e),void 0===r)throw new ReferenceError("b must be defined");if("number"!=typeof r)throw new TypeError("b must be a number");if("object"!=typeof t||null===t)throw new TypeError("result must be an object or array");for(let o=0;o<e.data.length;o++)t[o]=e.data[o]*r;return t};export const divideScalar=(e,r,t=[])=>{if(checkMatrix(e),void 0===r)throw new ReferenceError("b must be defined");if("number"!=typeof r)throw new TypeError("b must be a number");if("object"!=typeof t||null===t)throw new TypeError("result must be an object or array");for(let o=0;o<e.data.length;o++)t[o]=e.data[o]/r;return t};export const multiplyMatrix=(e,r,t=[])=>{if(checkMatrix(e),checkMatrix(r),e.columns!==r.rows)throw new RangeError("Number of columns in a must be equal to the number of rows in b");if("object"!=typeof t||null===t)throw new TypeError("result must be an object or array");for(let o=0;o<e.rows;o++)for(let n=0;n<r.columns;n++){let a=0;for(let t=0;t<e.columns;t++)a+=e.data[o*e.columns+t]*r.data[t*r.columns+n];t[o*r.columns+n]=a}return t};export const rowSwitch=(e,r,t,o=[])=>{if(checkMatrix(e),void 0===r)throw new ReferenceError("a must be defined");if("number"!=typeof r)throw new TypeError("a must be a number");if(r%1!=0)throw new RangeError("a must be an integer");if(r<0||r>e.rows-1)throw new RangeError("a must be greater than or equal to 0 and less than matrix.rows");if(void 0===t)throw new ReferenceError("b must be defined");if("number"!=typeof t)throw new TypeError("b must be a number");if(t%1!=0)throw new RangeError("b must be an integer");if(t<0||t>e.rows-1)throw new RangeError("b must be greater than or equal to 0 and less than matrix.rows");if("object"!=typeof o||null===o)throw new TypeError("result must be an object or array");for(let r=0;r<e.data.length;r++)o[r]=e.data[r];const n=e.columns;for(let a=0;a<n;a++){const u=e.data[r*n+a];o[r*n+a]=e.data[t*n+a],o[t*n+a]=u}return o};export const rowAdd=(e,r,t,o,n=[])=>{if(checkMatrix(e),void 0===r)throw new ReferenceError("a must be defined");if("number"!=typeof r)throw new TypeError("a must be a number");if(r%1>0)throw new RangeError("a must be an integer");if(r<0||r>e.rows-1)throw new RangeError("a must be greater than or equal to 0 and less than matrix.rows");if(void 0===t)throw new ReferenceError("b must be defined");if("number"!=typeof t)throw new TypeError("b must be a number");if(t%1>0)throw new RangeError("b must be an integer");if(t<0||t>e.rows-1)throw new RangeError("b must be greater than or equal to 0 and less than matrix.rows");if(void 0===o)throw new ReferenceError("n must be defined");if("number"!=typeof o)throw new TypeError("n must be a number");if("object"!=typeof n||null===n)throw new TypeError("result must be an object or array");for(let r=0;r<e.data.length;r++)n[r]=e.data[r];const a=e.columns;for(let u=0;u<a;u++)n[t*a+u]=e.data[t*a+u]+e.data[r*a+u]*o;return n};export const rowMultiply=(e,r,t,o=[])=>{if(checkMatrix(e),void 0===r)throw new ReferenceError("a must be defined");if("number"!=typeof r)throw new TypeError("a must be a number");if(r%1>0)throw new RangeError("a must be an integer");if(r<0||r>e.rows-1)throw new RangeError("a must be greater than or equal to 0 and less than matrix.rows");if(void 0===t)throw new ReferenceError("n must be defined");if("number"!=typeof t)throw new TypeError("n must be a number");if("object"!=typeof o||null===o)throw new TypeError("result must be an object or array");for(let r=0;r<e.data.length;r++)o[r]=e.data[r];const n=e.columns;for(let a=0;a<n;a++)o[r*n+a]=e.data[r*n+a]*t;return o};export const transpose=(e,r=[])=>{if(checkMatrix(e),"object"!=typeof r||null===r)throw new TypeError("result must be an object or array");const{rows:t,columns:o}=e;for(let n=0;n<t;n++)for(let a=0;a<o;a++)r[a*t+n]=e.data[n*o+a];return r};export const convertDOMMatrixToMatrix=e=>{if(void 0===e)throw new ReferenceError("domMatrix must be defined");if(e instanceof DOMMatrix==!1)throw new TypeError("domMatrix must be an instance of DOMMatrix");const r=newMatrix(4,4);for(let t=0;t<r.rows;t++)for(let o=0;o<r.columns;o++)r.data[t*r.columns+o]=e[`m${t+1}${o+1}`];return r};export const convertMatrixToDOMMatrix=e=>{checkMatrix(e);return new DOMMatrix(e.data)};export const formatDataRowMajor=e=>{checkMatrix(e);const r=new Array(e.rows);for(let e=0;e<r.length;e++)r[e]=[];for(let t=0;t<e.rows;t++)for(let o=0;o<e.columns;o++)r[t][o]=e.data[t*e.columns+o];return r};export const formatDataColumnMajor=e=>{checkMatrix(e);const r=new Array(e.columns);for(let e=0;e<r.length;e++)r[e]=[];for(let t=0;t<e.rows;t++)for(let o=0;o<e.columns;o++)r[o][t]=e.data[t*e.columns+o];return r};